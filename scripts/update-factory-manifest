#!/bin/sh
# -*- mode: shell-script-mode; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2019 Foundries.io
#
# SPDX-License-Identifier: Apache-2.0
#

# break on errors
set -e

PARENT_FILE=${PARENT_FILE:-conf/update-manifest.conf}
NAME=$(basename $0)
CONF=0

usage() {
    if [ "$1" != "help" ]; then
        echo "ERROR: $1" >&2
    fi
    echo >&2
    echo "usage: $NAME [options] [tag or sha]" >&2
    echo "      where options are:" >&2
    echo "             [-u|--url <update manifest URL> -p|--prefix <tag prefix>]" >&2
    echo "             [-w|--write-conf <write update manifest definition file>]" >&2
    echo "             [-c|--confirm do the update without a prompt" >&2
    echo "             [-d|--dry-run show what will be done but no changes" >&2
    echo "             [-h|--help ouputs this usage message " >&2
    echo >&2
    echo "note: current working directory should be a manifest repo" >&2
    exit 1
}

#
# source a files but only specific variable assignments
secure_source()
{
    TOPICS="URL PREFIX"
    TMPFILE="/tmp/$$"
    rm -f "${TMPFILE}"
    for topic in ${TOPICS}
    do
        grep "^${topic}=" $1 | grep -v -e '\$' -e "\`" >> ${TMPFILE} || true
    done
    . "${TMPFILE}"
    rm -f "${TMPFILE}"
}

abort_merge()
{
    errno=${1}
    git merge --abort || true
    echo ""
    echo "Unable to perform automatic update.  Restoring previous state."

    if [ "${errno}" != "128" ]; then
        echo ""
        echo "One of these last few commits is probably causing a conflict:"
        git log --no-merges --max-count=10 --format=oneline FETCH_HEAD..HEAD
    fi
    exit 1
}

#
# assumption on the parsing that options are first
while [ ${#} -gt 0 ]
do
    case ${1} in
    -w|--write-conf)
        CONF=1
        shift
        ;;
    -p|--prefix)
        [ -z "${2}" ] && usage "missing prefix argument"
        PREFIX="${2}"
        shift
        shift
        ;;
    -u|--url)
        [ -z "${2}" ] && usage "missing url argument"
        URL="${2}"
        shift
        shift
        ;;
    -c|--confirm)
        CONFIRM=y
        shift
        ;;
    -d|--dry-run)
        DRY=y
        shift
        ;;
    -h|--help)
        usage "help"
        ;;
    -*)
        usage "Invalid option '${1}'"
        ;;
    *)
        break
        ;;
    esac
done

if [ \( -z "${URL}" -a -n "${PREFIX}" \) -o \( -n "${URL}" -a -z "${PREFIX}" \) ]; then
    usage "url and prefix must both be present"
fi

if [ ${CONF} -eq 1 ]; then
    if [ -n "${URL}" ]; then
        echo "URL=${URL}" > "${PARENT_FILE}"
        echo "PREFIX=${PREFIX}" >> "${PARENT_FILE}"
        echo "Update manifest definition file created"
        echo "Use git add and git commit to include it"
        exit 0
    else
        usage "Missing content for definition file"
    fi
fi

#
# the argument has the highest priority
latest=${1}

if [ -e "${PARENT_FILE}" ]; then
    secure_source "${PARENT_FILE}"
    foundries_manifest="${URL}"
fi
if [ -z "$foundries_manifest" ]; then
    # set defaults
    foundries_manifest="https://github.com/foundriesio/lmp-manifest"
fi

# get current branch
local_branch=$(git rev-parse --abbrev-ref HEAD)

# look for a remote tracking branch
remote_branch=$(git config --get branch.${local_branch}.merge || true)
if [ -z "${remote_branch}" ]; then
    echo "fatal: The current branch has no upstream branch."
    echo "To set the upstream tracking branch, use: git branch -u <remote>/<branch>"
    exit 1
fi

# fetch tags from upstream
git fetch --tags --quiet ${foundries_manifest}

# if no tag parameter was supplied use latest upstream tag
if [ -z "${latest}" ]; then
    if [ -z "${PREFIX}" ]; then
        # assign last upstream tag to latest
        latest=$(git describe --tags --abbrev=0 FETCH_HEAD)
    else
        # assign last upstream prefixed tag to latest
        latest=$(git tag --list --sort=-version:refname "${PREFIX}-*" | head -n1)
    fi
fi

# check to see if last upstream tag is already included in HEAD (if so exit)
errno=0
git merge-base --is-ancestor ${latest} HEAD || errno=$?
# found tag as ancestor, no updates
if [ "${errno}" -eq 0 ]; then
    echo "No new releases found upstream"
    exit 0
# unhandled error (invalid object name)
elif [ "${errno}" -gt 1 ]; then
    exit 1
fi

echo "New upstream release(s) have been found."
echo "Merging local code with upstream release: ${latest}"

if [ "$DRY" = "y" ]; then
    echo "git merge --no-edit -m \"update-manifest: merge LmP ${latest}\" ${latest}"
    echo "git push origin HEAD:${remote_branch} && git push --tags origin"
    exit 0
fi

while [ "$CONFIRM" != "y" -a "$CONFIRM" != "n" ]; do
    echo -n "Proceed ? (y/n): "
    read CONFIRM
done

if [ "$CONFIRM" = "n" ]; then
    exit 0
fi

# merge to the last upstream tag
git merge --no-edit -m "update-manifest: merge LmP ${latest}" ${latest} || abort_merge $?

echo ""
echo "Automatic update successful!"

git push origin HEAD:${remote_branch} && git push --tags origin
